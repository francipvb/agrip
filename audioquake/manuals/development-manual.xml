<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
    "/usr/share/sgml/docbook/dtd/xml/4.3/docbookx.dtd"

    [   <!ENTITY gnu-gpl SYSTEM "http://www.gnu.org/licenses/gpl.xml">
        <!ENTITY gnu-fdl SYSTEM "http://www.gnu.org/licenses/fdl.xml">
]>

<!--
    The AGRIP AudioQuake Development Manual
    in DocBook XML

    by Matthew Tylee Atkinson
!-->

<book lang="en" id="audioquake-development-manual">
    <bookinfo>
        <title>AGRIP AudioQuake Development Manual</title>

        <authorgroup>
            <author>
                <firstname>Matthew</firstname>
                <othername>Tylee</othername>
                <surname>Atkinson</surname>
            </author>
            <author>
                <firstname>Sabahattin</firstname>
                <surname>Gucukoglu</surname>
            </author>
        </authorgroup>
        
        <releaseinfo>0.3.0 BETA</releaseinfo>

        <pubdate>10th April 2007</pubdate>

        <abstract>
            <para>
                This is the developer manual and reference guide for developing with AudioQuake (from engine and gamecode technology to Stats and Servers infrastructure).  We hope you'll find it helpful and informative.  Please help us improve these resources by reporting any bugs and/or submitting update requests to <email>docs@agrip.org.uk</email>.
            </para>
            <para>
                The AGRIP web site, which provides a number of resources for those using and developing AudioQuake, can be found at: <ulink url="http://www.agrip.org.uk/">http://www.agrip.org.uk/</ulink>
            </para>
            <para>
                The latest version of this manual can be found at: <ulink url="http://docs.agrip.org.uk/">http://docs.agrip.org.uk/</ulink>
            </para>
            <para>
                The revision number of the manual follows the same format as the AudioQuake version number.  If the first two digits of the version numbers match, the manual and AudioQuake will correspond.  In the context of development, this means that any modifications you make will be compatible with that release series.  If you are making a total conversion, this will not be so much of a concern.
            </para>
        </abstract>
 
        <copyright>
            <year>2005&ndash;2007</year>
            <holder>Matthew Tylee Atkinson</holder>
        </copyright>
        <copyright>
            <year>2007</year>
            <holder>Sabahattin Gucukoglu</holder>
        </copyright>

        <legalnotice>
            <para>
                Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "GNU Free Documentation License".
            </para>
            <para>
                Please note that AudioQuake itself is distributed under the GNU General Public License.  This is included as an appendix to this document as with the FDL.
            </para>
        </legalnotice>

        <keywordset>
            <keyword>AGRIP</keyword>
            <keyword>AccessibleQuake</keyword>
            <keyword>AudioQuake</keyword>
            <keyword>Quake</keyword>
            <keyword>accessible</keyword>
            <keyword>accessibility</keyword>
            <keyword>game</keyword>
            <keyword>FPS</keyword>
            <keyword>vision</keyword>
            <keyword>vision-impaired</keyword>
            <keyword>blind</keyword>
            <keyword>engine</keyword>
            <keyword>gamecode</keyword>
            <keyword>develop</keyword>
            <keyword>development</keyword>
        </keywordset>
    </bookinfo>



    <part id='start'>
        <title>Getting Started</title>

        <chapter id="intro">
            <title>Background Information</title>
    
            <section id="intro-whofor">
                <title>Target Audience</title>
                <para>
                    This manual is aimed at people who are either curious about how AudioQuake works, want to develop modifications to it or use the engine/gamecode as the basis for their own projects.  It is expected that the reader is reasonably familiar with software development using Linux or Windows.  Please be aware, however, that support is available from the AGRIP team and mailing lists.
                </para>
            </section>
    
            <section id='intro-ethos'>
                <title>Development Ethos</title>
                <para>
                    We work on providing blind and vision-impaired people with the tools to make their own audio and audio/visual games. <ulink url="http://www.agrip.org.uk/ProjectInfoSection/TheRoadmap">The project roadmap</ulink> details what our plans (influenced by community feedback) and this page explains a little of how we do it &ndash; and how your projects can benefit.
                </para>
            </section>
    
            <section id='intro-features'>
                <title>What we Provide</title>
                <para>
                    AudioQuake provides an accessible platform for game development, including some of the tools you can use to create the games.  The following main features are provided:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            The accessible <ulink url='http://www.agrip.org.uk/GameEngine'>game engine</ulink> known as ZQuake.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The <ulink url='http://www.agrip.org.uk/GameCode'>game code</ulink> that makes Quake, QuakeWorld and your mods accessible.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A comprehensive framework of utility and accessibility functions that you can take advantage of when creating your own game modifications.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Information on how the accessibility features in and outside of the engine work together.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The <ulink url='http://stats.agrip.org.uk/'>Stats and Servers</ulink> system, including authentication protocol.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Plans for OpenAL ("ImplicitAccessibility") support.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Plans for level editing tools.  Long-term plans point to some work that will require significant research and development.  Whilst this is ongoing, we will look into a tool that will help create simple levels at least.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    It is highly recommended that new developers read <ulink url='http://www.agrip.org.uk/ProjectInfoSection'>http://www.agrip.org.uk/ProjectInfoSection</ulink> &ndash; specifically all of "The Technology we Use" - for information on how all of this fits together.
                </para>
            </section>
            
            <section id="intro-legal">
                <title>Licencing</title>
                <para>
                    AGRIP is an Open Source project. Anyone is welcome to use our tools and code in the creation of their own games, provided that they keep their creations open (i.e. release the source and derived data files, under the GNU General Public Licence).
                </para>
                <para>
                    If you are interested in using our software as the basis for your own, you must read <ulink url='http://www.gnu.org/copyleft/gpl.html'>the licence</ulink> fully and ensure that you are aware of its ramifications. We are happy to answer any licencing questions &ndash; please <ulink url='http://www.agrip.org.uk/ContactUs'>contact us</ulink> to find out more.
                </para>
                <para>
                    Some chapters of the distributed packages are not subject to the GPL but other licences &ndash; the LEGALINFO file you received (and agreed to when installing AudioQuake) explains all.
                </para>
                <para>
                    If you feel that you absolutely must develop proprietary software based on our code, please <ulink url='http://www.agrip.org.uk/ContactUs'>contact us</ulink> and we may be able to arrange an alternative licence. 
                </para>
            </section>
        </chapter>
        
        <chapter id='start-components'>
            <title>Components</title>
            <section id='start-components-general'>
                <title>Engine, Gamecode and Data</title>
                <para>
                    It is important to be aware that there are three main parts of modern first-person shooters, all of which you can modify.  The following list summarises these parts and how modifying them can affect the game.
                </para>
                <variablelist>
                    <varlistentry>
                        <term>The Engine</term>
                        <listitem>
                            <para>
                                The engine is the part of the game that computes all of the 3D graphics and takes care of other low-level issues such as sound, networking and receiving input from the keyboard and other peripherals.
                            </para>
                            <para>
                                Modifying the engine may result in vastly different appearance (some mods for Quake have made it appear drawn as if it were a cartoon, or pencil outline drawing, for example).  It may also improve the output of sound and/or networking capacity.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Gamecode</term>
                        <listitem>
                            <para>
                                Gamecode is the high-level code that determines how the gameworld works.  It controls things like how the player interacts with doors and buttons, how the weapons and powerups work and the behaviour of monsters.
                            </para>
                            <para>
                                Modifying the gamecode can introduce new enemy or friendly characters, upgrade or replace weapons, items and alter the way that the environment (doors, slime and so on) works.  Modifying the gamecode to create new gametypes is one of the most popular ways of developing with modern computer games and is relatively easy to do thanks to the high-level nature of the gamecode language (<quote>QuakeC</quote> in this case).
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Data</term>
                        <listitem>
                            <para>
                                The engine and gamecode are pointless without content that can be supplied to the user.  The maps, textures (graphics applied to the 3D environment to increase realism), models (3D shapes of enemies, items, weapons), skins (textures applied to models) and sounds presented to the user are collectively known as the game data.
                            </para>
                            <para>
                                Modifying the data alone can have a striking impact on the game, from adding new environments (maps) to making existing ones appear quite different.  Different player and enemy models can also change things quite a bit (and are popular online).  Sounds (such as the mindgrid expansion pack) can improve the player's experience significantly and alter the feel of the game.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <note>
                    <para>
                        A <quote>Total Conversion</quote> of a game with this architecture is a modification that replaces all components of the data, gamecode and engine with modified versions.  We welcome anyone to create TCs that turn AudioQuake into the accessible 3D game they've always wanted to play!
                    </para>
                </note>
            </section>
            <section id='start-components-aq'>
                <title>AudioQuake's Components</title>
                <para>
                    When running, the game <quote>AudioQuake</quote> is actually made up of the following semi-separate parts:
                </para>
                <variablelist>
                    <varlistentry>
                        <term>An accessible build of the ZQuake <ulink url='http://www.agrip.org.uk/GameEngine'>game engine</ulink></term>
                        <listitem>
                            <para>
                                ZQuake is a mainstream QuakeWorld engine that has been made accessible by a series of small modifications.  The maintainers have kindly allowed it to be used by the AGRIP project as the basis of AudioQuake.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>The <ulink url='http://www.agrip.org.uk/GameCode'>game code</ulink></term>
                        <listitem>
                            <para>
                                The standard QuakeC gamecode has been customised to include a library of accessibility features.  It is here that 90%+ of the AGRIP code runs.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>The game launcher</term>
                        <listitem>
                            <para>
                                A front-end to the engine that helps users set accessibility options and provides a channel for text-to-speech data to exit the engine for further processing before it is rendered.  This allows us to provide high-level processing on text generated by the game that is inappropriate for the engine to deal with.  It facilitates the use of multiple speech/braille back-ends, though this has not yet been used.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>
                    To build yourself a working release, you'll need the code for all these parts of the game, as well as the game data.  The data is the sounds, models, maps and textures that make up the game world.  The gamecode directs the engine to play/render the data at the appropriate time (for example, the gamecode for the D5k tells the engine when and where to play sounds that correspond to items in the map).
                </para>
                <para>
                    Building the supporting tools and documentation will be covered in later parts.
                </para>
            </section>
        </chapter>

        <chapter id='start-basics'>
            <title>Fundamental Concepts</title>
            <para>
                This chapter introduces some vital concepts you need to be aware of and understand before you can understand how modifying any aspect of the game actually works.
            </para>
            <section id='start-basics-vfs'>
                <title>The Virtual File System (VFS)</title>
                <para>
                    A file system is basically the organised arrangement of objects (normally files and directories) which make up your data.  The VFS (Virtual File System) is, as its name suggests, virtual.  File systems on your disks are not&ndash;they are stored on disk and comprise data you put on that disk in that file system.  The source of the data is a physical device, and usually exclusively that device.  By contrast, the VFS is virtual&ndash;objects in the file system are loaded sequentially from various sources, and the prevailing object in case of a conflict is the one loaded last.  This is important in understanding how a mod works.
                </para>
                <para>
                    When Quake starts, it scans a directory looking for files called <quote>PAK files</quote>, so-called because their extension is .pak.  These pak files are numbered, starting from zero, and Quake loads these files in ascending order.  The pak file contains a file system, and this is loaded into the in-game file system.  The process is repeated for each pak file in this directory.
                </para>
                <para>
                    Next, Quake will read a file system from a directory in your "Real" disk file system.  That directory typically contains a mod, and the user specifies it with a command-line parameter to Quake when it is started.  Putting the files in the mod directory is equivalent to putting them into an additional pak file (tools exist to help you do that) in the pak files directory.
                </para>
                <para>
                    In both cases, when a file exists in the virtual file system, any version loaded later with the same path will replace the one loaded before it.  Since the file system is virtual, the source of these files is insignificant&ndash;it may be either the pak files or the mod directory, and the loading behaviour will usually mean that mods get loaded over in-game objects.  The programmed game code does not make any special differentiation between files loaded from one place as opposed to another&ndash;it simply references the object desired, and the engine will determine the ultimate location of the object.
                </para>
                <section id='start-basics-vfs-try'>
                    <title>Try it Yourself!</title>
                    <para>
                        The best way to learn about how the PAK files are created is to extract the data from them and experiment with changing it.  You can use tools such as <ulink url='http://quakestuff.telefragged.com/'>PakExplorer</ulink> to do this.
                    </para>
                </section>
            </section>
            <section id='start-basics-quakemod'>
                <title>Procedure for Modding AudioQuake</title>
                <para>
                    This section describes the overall process for modifying the game.  The list below describes a typical set-up that allows you to test your mod, tweak things and quickly re-test.  When you want to make packages of your mod for end-users to quickly install and easily manage, you'll need to read the part on <link linkend='qmod-intro'>QMODs</link>.  The rest of the manual goes into more detail on how you carry out certain stages in this process, such as modifying content or gamecode.
                </para>
                <orderedlist>
                    <listitem>
                        <para>
                            Add to/modify the gamecode, or add new content.  (Note that modifying the engine would make the game no longer AudioQuake, hence it's not mentioned here, but accessible total conversions into entirely new games are very much encouraged!)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Place your modifications into a new directory inside the AudioQuake directory, beside the <filename>id1/</filename> directory that's already there.  Any files in your directory with the same name as ones in <filename>id1/</filename> (or inside the <filename>.pak</filename> files) will override the pre-existing ones.
                        </para>
                        <para>
                            For example, if you have changed some of the sounds in the game, you can recreate the directory structure of the <filename>.pak</filename> files in <filename>id1</filename>, including only the sounds you changed (the rest will still be loaded from the <filename>.pak</filename> files).  If your mod is called <quote>testmod</quote>, the sounds may be in <filename>testmod/sound/player/</filename>.  If you've modified the gamecode, put <filename>progs.dat</filename> and <filename>spprogs.dat</filename> into the <filename>testmod/</filename> directory and they'll override the ones in <filename>id1/*.pak</filename>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Start the game, telling it to load in your new modifications over the top of the default gamecode and content in <filename>id1/</filename>.  This is the standard way that mods work, by replacing certain parts of the original game content and/or code.
                        </para>
                        <para>
                            In normal Quake, this would be done by specifying <quote>+gamedir <replaceable>mod_directory</replaceable></quote> on the command line.  In AudioQuake, however, this is done by changing the <quote>default_gamedir</quote> line in the <quote>general</quote> section of <filename>start.ini</filename> to the directory of your mod, as opposed to <quote>id1</quote>.  This points the game at your mod for an extra source of content and gamecode (the contents of the <filename>id1/</filename> directory will still be loaded into the VFS, however, as that's the standard Quake behaviour).
                        </para>
                        <warning>
                            <para>
                                This technique is intended to be used only by mod developers, when testing their mod (note that it stops you from being able to run standard AudioQuake).  To make packages of your mod for end-users, please see the <link linkend='qmod-intro'>QMODs</link> part.  There are a number of advantages in using the QMOD method: users can install mods simply by double-clicking; they can switch between multiple mods easily via the launcher instead of having to edit a Perl script and your mod can be kept up-to-date with changes to the users' settings automagically by the AudioQuake launcher.
                            </para>
                        </warning>
                    </listitem>
                    <listitem>
                        <para>
                            Tweak and test, repeat as necessary.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Package up your mod into a QMOD file.  This requires that you put any mod-specific settings into a file named <filename>mod.cfg</filename> in your mod's directory.  Ensure that any <filename>autoexec.cfg</filename> and/or <filename>config.cfg</filename> files have been removed, as the QMOD system can copy over the user's settings, which are likely to be different than the ones you've specifed, into your mod for you.  This enusres that key bindings and settings are consistent from the user's perspecitve.  The QMOD system can keep your mod up-to-date with changes in the user's settings automatically.  Read the <link linkend='qmod-intro'>QMOD</link> part of this manual for information on the other steps you need to take.
                        </para>
                    </listitem>
                </orderedlist>
                <para>
                    The rest of this manual explains how to perform the modifications of gamecode and engine, as well as packaging up your modification in QMOD form, building AudioQuake releases from source and how the Stats and Servers infrastructure works.
                </para>
                <para>
                    As map editing is not (currently) possible, it is not described.  Work on making map editing accessible is ongoing, however.
                </para>
            </section>
        </chapter>
    </part>

    <part id='compiling'>
        <title>Getting and Compiling the Source</title>
        <para>
            This part details what you'll need to do to get the code for AudioQuake and compile it.  The Stats and Servers infrastructure and other tools are beyond the scope of this chapter.  Here you'll find a quick overview of what you need to do.  Subsequent chapters will elaborate on why things are the way they are.
        </para>
        <note>
            <para>
                These instructions are written with UNIX-like systems in mind (upon which you'll need to have the <command>subversion</command> package installed).  You can get and compile the source for ZQuake on Windows, but some of the AudioQuake build scripts only work on UNIX-like systems, so to make a full AudioQuake release you will either need to use a UNIX-like system, or carry out the steps manually on Windows.  We recommend use of <ulink url='http://tortoisesvn.tigris.org/'>TortoiseSVN</ulink> to get the sources on Windows.
            </para>
        </note>
        <chapter id='compiling-overallproc'>
            <title>From Source to Package &ndash; the Overall Process</title>
            <para>
                The entire process of getting the source and turning it into a releasable package is as follows.  The rest of this chapter describes these steps in more detail.  As some steps have to be done on certain operating systems, the systems required are indicated for each one.
            </para>
            <procedure>
                <step>
                    <para>
                        Get the source using a Subversion client.  (Doable on Linux and Windows.)
                    </para>
                </step>
                <step>
                    <para>
                        Compile the ZQuake Engine and AudioQuake gamecode.  (Automated on Linux; a little extra work on Windows.)
                    </para>
                </step>
                <step>
                    <para>
                        Use the build scripts provided to set up the above engine and gamecode on your machine, for testing purposes.  (Automated on Linux.)
                    </para>
                </step>
                <step>
                    <para>
                        Use the build scripts to compile the documentation into HTML files for distribution.  (Automated on Linux; doable with work on Windows.)
                    </para>
                </step>
                <step>
                    <para>
                        Use the build scripts to package the game engine, gamecode and documentation into packages suitable for release.  This contains a few separate stages, as follows.
                    </para>
                    <substeps>
                        <step>
                            <para>
                                Put all engine binaries in a known location for the build scripts to pick them up.
                            </para>
                        </step>
                        <step>
                            <para>
                                Check the <filename>setup</filename> script, which is the Linux self-installer script and update it as necessary.  (Applicable to Linux.)
                            </para>
                        </step>
                        <step>
                            <para>
                                Issue the build script command that requests releases packages be made and indicate which releases you'd like to make (i.e. Linux/PowerPC, Linux/x86, Windows).  The result of this is a self-installer for Linux and ZIP files for Windows that need further processing.  (Automated on Linux.)
                            </para>
                        </step>
                        <step>
                            <para>
                                For Windows releases, the ZIP files need to be extracted and the <filename>setup.iss</filename> file compiled with Inno Setup to create a standard Windows setup program.  (Applicable to Windows.)
                            </para>
                            <note>
                                <para>
                                    If you wish to include the SAPI runtime and/or voices with your release, you'll have to follow Microsoft's documentation on how to do that separately.  The license does not permit redistribution of such modules outside of installers for full applications.
                                </para>
                            </note>
                        </step>
                    </substeps>
                </step>
                <step>
                    <para>
                        The final stage is to put the files somewhere public and point people towards them.  Remember to test them first, though!
                    </para>
                </step>
            </procedure>
        </chapter>

        <chapter id='compiling-locating'>
            <title>Locating the Source</title>
            <para>
                All of the code for AudioQuake, ZQuake, the QuakeC gamecode, MAUTH and stats system (as well as other components as they're added) is available from the AGRIP Subversion repository.  Subversion is a version control system very similar to CVS, which you may have used before.  More information can be found in <xref linkend='ref-vcs'/>.
            </para>
            <para>
                Currently we provide a read-only anonymous access repository at <ulink url='http://svn.agrip.org.uk/'>http://svn.agrip.org.uk/</ulink> and a private one for development which is accessible via the <function>svn://</function> protocol.  Community members are welcome to have full-access accounts created for the primary development repository.
            </para>
            <section>
                <title>Repository Structure</title>
                <para>
                    Code found in the AGRIP Subversion repository is grouped at the highest level into <firstterm>trunk</firstterm> (where development is done), <firstterm>branches</firstterm> (where major features are staged before being entered into the (relatively) stable mainline of development) and <firstterm>tags</firstterm> (where the code for released versions is stored.
                </para>
                <para>
                    Below this level, sub-components may be found &ndash; for example <quote>audioquake</quote>, <quote>sns</quote> (Stats and Servers), <quote>mauth</quote> (Master AUTHentication protocol tools) and <quote>ldl</quote> (Level Description Language).
                </para>
            </section>
            <section>
                <title>Available Modules</title>
                <variablelist>
                    <varlistentry>
                        <term>Engine</term>
                        <listitem>
                            <para>
                                ZQuake can be obtained from the <filename>/trunk/zq-repo/zquake/</filename> module in the repository.  This code is forked (for convenience of access via our repository from the ZQuake <ulink url='http://www.sourceforge.net/projects/zquake/'>project</ulink> on SourceForge.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Gamecode</term>
                        <listitem>
                            <para>
                                A modular version of the Quake, QuakeWorld and gamecode for other popular modifications (including the AGRIP accessibility extensions) can be found in the <filename>zq-repo/qc/</filename> module in our repository.
                            </para>
                            <note>
                                <para>
                                    To compile the gamecode, you'll need the ZQuake QuakeC Compiler (<quote>ZQCC</quote>).  In a totally groundbreaking and novel move, it's source has been included in our repository too (<filename>/trunk/zq-repo/zqcc/</filename>).
                                </para>
                                <para>
                                    The AudioQuake build scripts will automatically compile <command>zqcc</command> for you, if you've checked out the code, during the AudioQuake build process.
                                </para>
                            </note>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Manuals, Launcher, Support Files and Build Scripts</term>
                        <listitem>
                            <para>
                                This is also all hosted in our Subversion repository (<filename>/trunk/audioquake/</filename>).  Included are all of the support files, documentation and build scripts you need to create working AudioQuake packages for the supported operating systems.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Stats and Servers Infrastructure and Site</term>
                        <listitem>
                            <para>
                                We are constantly developing this side of the project, too, and make the results available in our Subversion repository.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </chapter>

        <chapter id='compiling-getting'>
            <title>Getting the Code &ndash; Step by Step</title>
            <procedure>
                <step>
                    <para>
                        Use your SVN client of choice to download either the whole development tree, or individual parts of it.
                    </para>
                    <screen>
svn co http://svn.agrip.org.uk/trunk/
                    </screen>
                    <para>
                        The above command will get you <emphasis>all</emphasis> of the components being developed (so that's at least the entire ZQuake codebase, AudioQuake, MAUTH protocol tools and the Stats and Servers web application).
                    </para>
                    <para>
                        If you just want ZQuake and AudioQuake (the minimum requirements to build a release of AudioQuake), you could issue the following commands.
                    </para>
                    <screen>
svn co http://svn.agrip.org.uk/trunk/zq-repo/
svn co http://svn.agrip.org.uk/trunk/audioquake/
                    </screen>
                    <para>
                        If you do that, because of the way the build system works, it would be helpful for you to make a <filename>trunk/</filename> directory (it can have any name, though) and check out the individual components into it.  This will help you later on, when you will need to put things such as engine binaries in places the build system can find.
                    </para>
                    <para>
                        If you are behind a nasty proxy, this may not work, in which case you can use the URL <filename>svn://agrip.org.uk/agrip/trunk/audioquake/</filename> but don't supply any authentication information.
                    </para>
                </step>
                <step>
                    <para>
                        You can update your working copy at any time by issuing the <command>svn up</command> command in any checked-out directory.
                    </para>
                </step>
            </procedure>
        </chapter>

        <chapter id='compiling-stepbystep'>
            <title>Compiling the Code &ndash; Step by Step</title>
            <para>
                Remember that the build scripts, used to generate packages for releases, will only work on UNIX-like systems (currently).  Other notes on the use of Windows can be found below.
            </para>
            <section id='compiling-stepbystep-nix'>
                <title>From Source to Package for Release (UNIX-like Systems Only)</title>
                <procedure>
                    <step>
                        <para>
                            To compile the ZQuake engine, go into the <filename>trunk/zq-repo/zquake/</filename> directory relative to the place where you checked-out from Subversion.
                        </para>
                   </step>
                    <step>
                        <para>
                            You can then compile ZQuake by issuing <command>make</command> on a UNIX-like system, or using Visual Studio on Windows.
                        </para>
                        <note>
                            <para>
                                Currently on UNIX-like systems, X is required.  We are working on removing the need for graphical output and hopefully in the future this will not be the case.  Using <command>make help</command> should give you the information you need to choose a compilation target.
                            </para>
                        </note>
                    </step>
                    <step>
                        <para>
                            The standard build scripts for AudioQuake assume that ZQuake engine binaries for various platforms and architectures (e.g. Linux/PowerPC, Windows (x86)) are placed in a certain directory for inclusion in release packages.  This directory is, by default, <filename>../../redist/</filename>.  If you checked-out the <filename>trunk/</filename> from Subversion, put a <filename>redist/</filename> directory in the same place as it n your filesystem.  If you place engine binaries there, they'll be picked up.  Conversely, if you <emphasis>don't</emphasis> they won't be and your release packages may be out-of-date!
                        </para>
                    </step>
                    <step>
                        <para>
                            Go into the <filename>trunk/audioquake/</filename> directory (from the location you checked-out from) and issue <command>compile-mod-tree</command> to compile the latest gamecode (<command>zqcc</command> is automatically built for you during this process, from the code in the <filename>trunk/zq-repo/zqcc/</filename> directory) and have a release of AudioQuake installed into your home directory.
                        </para>
                        <para>
                            As part of the build process, the standard set of maps (compiled into BSP form), demos and skins are downloaded from <ulink url='http://docs.agrip.org.uk/devfiles/'>http://docs.agrip.org.uk/devfiles/</ulink>.  This means that you don't need to worry about compiling/finding them when you build a release.
                        </para>
                        <para>
                            If you're happy with the results, you can make packages for release by issuing <command>make-release</command>.  By default, packages are generated in <filename>../../releases/</filename>.  This means that if you check out the <filename>trunk/</filename>, you can make a <filename>releases/</filename> directory next to it, along with the <filename>redist/</filename> one from earlier.
                        </para>
                        <note>
                            <para>
                                Windows releases need to be further processed into <filename>setup.exe</filename>&ndash;style files for distribution.  This must be done on Windows.  A ZIP file with an appropriate <filename>setup.iss</filename> (Inno Setup) file for this release will be generated; you can then put that on a Windows box to create the installer.
                            </para>
                        </note>
                    </step>
                </procedure>
            </section>
            <section id='compiling-stepbystep-doze'>
                <title>Compiling the ZQuake Engine on Windows</title>
                <para>
                    To create packages for release, you need to use a UNIX-like system currently (it will create ZIP files that are turned into self-installers for Linux and can be turned, with the help of Inno Setup on Windows, into a Windows setup program).  The previous section contains instructions on this.
                </para>
                <para>
                    It is possible to build the ZQuake engine alone on Windows without using a UNIX-like system, however.  To compile with Visual Studio 2003, take the following steps.
                </para>
                <orderedlist>
                    <listitem>
                        <para>
                            You'll need the <command>gas2masm</command> and <command>ml</command> utilities to assemble the <filename>.asm</filename> files used by the engine.  You can download an archive containing these from <ulink url='http://docs.agrip.org.uk/devfiles/src-need.zip'>the AGRIP documentation site</ulink>.  Extract this archive into your <filename>/trunk/zq-repo/zquake/source/</filename> directory.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            To ensure you're using the right settings for compilation, copy the <filename>.sln</filename> and <filename>.vcproj</filename> files from <filename>/trunk/zq-repo/zquake/vidnull/</filename> to <filename>/trunk/zq-repo/zquake/source/</filename>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            To compile the server and OpenGL engine, open the <filename>.sln</filename> file in VS2003 and choose the <quote>GLRelease</quote> configuration from the configuration manager.  Then compile <command>zqds</command> and <command>zquake</command> projects.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            To apply the vidnull patch, needed for users of screen readers that cannot cope with OpenGL applications, copy the <filename>.c</filename> files from <filename>/trunk/zq-repo/zquake/vidnull/</filename> to <filename>/trunk/zq-repo/zquake/source/</filename>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            To compile the vidnull patch, go back into VS2003 by opening the <filename>.sln</filename> file as before, then choose the <quote>VNRelease</quote> configuration and compile the <command>zquake</command> project.
                        </para>
                    </listitem>
                </orderedlist>
            </section>
        </chapter>

        <chapter id='compiling-extras'>
            <title>Documentation, Build Scripts and AGSay</title>
            <para>
                Lots of the programs in the AudioQuake area of the repository are documentation and build scripts.  They can all be built on UNIX, provided you have the requisite tools (the only potentially exotic requirement is a DocBook XML installation and an XML/XSLT processor). You will also find an Inno Setup script for creating installers on Windows.
            </para>
            <note>
                <para>
                    It is possible to compile DocBook documents on Windows, but the set-up of the various tools required is laborious.  We have previously done this and may be able to provide a ZIP of the appropriate set-up for you, but cannot provide support for it.  Contributions on DocBook toolchains for Windows are welcome!
                </para>
            </note>
            <para>
                The <quote>AGSay</quote> program is used by <filename>start.pl</filename> to interface with the SAPI TTS on Windows.  If you need to compile it, you need to have a SAPI 5.x series SDK installed.  Licencing restrictions prevent us from including certain parts of this &ndash; such as the MSI Merge Modules &ndash; so if you want to build an entire release that includes SAPI components you'll unfortunately have to download those too).
            </para>
            <para>
                On UNIX platforms, eflite (the Emacspeak Flite speech server) is used for speech and standard serial ports and settings may be used for Braille output.
            </para>
        </chapter>
    </part>

    <part id='gcode'>
        <title>Creating/Modding Gamecode</title>
        <chapter id='gcode-qc'>
            <title>QuakeC</title>
            <section>
                <title>Basic Overview of the Technology</title>
                <para>
                    QuakeC is a high-level gamecode language that is compiled into bytecode/assembly instructions for the QuakeC Virtual Machine (in much the same way that Java and Perl work).  The virtual machine is what executes your compiled-down code (the .dat files).  The reasons why a virtual machine is used are portability (QuakeC works on all platforms that Quake does) and security (your mod cannot access anything outside of the QuakeC VM, other than the <quote>builtin</quote> functions that the Quake engine provides).
                </para>
                <para>
                    The engine provides builtin functions for doing performance-critical calculations (such as working out if a particular 3D vector corresponding to the aim of a weapon would hit a player) and interfacing with the outside world via the presentation of content to the user, such as sounds (e.g. when a weapon fires, a sound is made).
                </para>
                <para>
                    The whole gamecode for Quake, with AGRIP extensions, and any modifications you make must be compiled together into one <filename>.dat</filename> file.  All of the code you need is in the Subversion repository.  Unfortunately this has the side effect that only one modification can running any time; the Unreal engine (which powers a competing series of games) provides some ways to combat this and run multiple modifications at once.  Alas it is not Open Source so hasn't been made accessible yet.  In practise this limitation of the Quake engine should not make too much difference, as the user can have multiple mods installed at any time (the game launcher and QMOD system take care of this).
                </para>
            </section>
            <section>
                <title>The Language</title>
                <para>
                    QuakeC is similar to C in nature.  This is not a tutorial on the language itself; it is assumed the reader is used to programming in general.  Much information can be found through the resources listed in <link linkend='ref-qc'>appendix section</link> on the matter.
                </para>
            </section>
            <section>
                <title>Building Code &ndash; The Basics</title>
                <para>
                    QuakeC (<filename>.qc</filename>) files must be compiled into a <filename>.dat</filename> to be run by the game.  The gamecode for the entire game is composed of many QuakeC files.  Some of the files are only applicable to the single-player game and some are multiplayer-specific, so actually two <filename>.dat</filename> files are usually built (one for each type of gameplay).
                </para>
                <para>
                    Which QuakeC files are compiled together, and the order in which that's done, is dictated by a <filename>.src</filename> file.  This is a text file that lists the name of the output file on the first line and, on following lines, the QuakeC files to be processed.  ZQuake is a QuakeWorld (multiplayer) game engine, but has had the single player monsters and AI ported to it.  Because of this, the convention is for there to be a <filename>progs.src</filename> file used to produce the multiplayer <filename>progs.dat</filename> code, and a <filename>spprogs.src</filename> file that is used to create the singleplayer <filename>spprogs.dat</filename>.
                </para>
                <para>
                    Building of the QuakeC code as part of the whole AudioQuake release is covered in more detail elsewhere in the manual.  The important part from a QuakeC perspective is that the ZQuake QuakeC Compiler (<command>zqcc</command>) must be run on a suitable <filename>progs.src</filename> file to turn the QuakeC files into a <filename>.dat</filename> file for the game to run.
                </para>
            </section>
            <section>
                <title>ZQuake Modular Gamecode</title>
                <para>
                    The ZQuake project hosts gamecode for a number of popular game modes and mods.  This includes a version of the classic single-player Quake gamecode ported to QuakeWorld.  It is laid out in a number of directories as follows.
                </para>
                <variablelist>
                    <varlistentry>
                        <term>ctf, kteams, ktffa</term>
                        <listitem>
                            <para>
                                Gametypes that have not yet been made accessible.  Note that this version of CTF is not under active development and kteams is a deathmatch-like mode (we decided to make the classic Quake TeamDM more akin to that found in later games such as Unreal Tournament rather than adopt this mod).
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>tutor, zeus, kteamsbot, frikbot</term>
                        <listitem>
                            <para>
                                Code for various bots which we don't use.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>hipnotic</term>
                        <listitem>
                            <para>
                                Code for the mission pack &quot;The Scourge of Armagon&quot; (also unused).
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>qw</term>
                        <listitem>
                            <para>
                                Where it all started &ndash; a maintained version of the QuakeWorld (DM, Classic TeamDM) gamecode.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>qwsp</term>
                        <listitem>
                            <para>
                                The extra code on top of that in the <filename>qw/</filename> directory to add all the elements of single player classic Quake.
                            </para>
                            <note>
                                <para>
                                    As with other code here, lots of it is linked and depends on code in other directories.  Most code uses a lot of the stuff in the <filename>qw/</filename> directory and this one is no exception.
                                </para>
                                <para>
                                    Such tight linking of code keeps the codebase small, easy to maintain and reliable.
                                </para>
                            </note>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>agrip</term>
                        <listitem>
                            <para>
                                Our accessibility hooks into the main game (both QW and QWSP versions are catered for, though the use of different <filename>.src</filename> files, which tell ZQCC how to build the AGRIPified gamecode <filename>.dat</filename>s.
                            </para>
                            <note>
                                <para>
                                    Again, our code links heavily to that in the <filename>qw/</filename> and <filename>qwsp/</filename> directories.
                                </para>
                            </note>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>
                    As has been pointed out, much of the code hare is linked and when you develop a mod, we recommend you start a new top-level directory in here and reuse as much of the existing code as you can.  Start with one of the AGRIP <filename>progs.src</filename> files and add any extra <filename>.qc</filename> files you might need in your own directory.
                </para>
                <note>
                    <para>
                        If you need to override any functions in the main code, don't replace an entire file with your own version &ndash; there is a way for you to override individual functions elsewhere in the code, which will be explained later.
                    </para>
                </note>
                <para>
                    Constructing your mod in this way has the advantages of much easier upgrades between AGRIP versions (as if you follow the guidelines here you'll be hooking into our code mostly and won't have to worry about changes in the stock ZQuake code).  It also keeps your mod's codebaese small, simple and therefore easy to maintain and (hopefully!) more reliable.
                </para>
                <para>
                    Guidelines for constructing your mod in this way can be found throughout this guide.
                </para>
            </section>
        </chapter>
        <chapter id='gcode-agrip'>
            <title>AGRIP Gamecode System</title>
            <section>
                <title>Philosophy</title>
                <para>
                    The gamecode used in AudioQuake has two main goals:
                </para>
                <variablelist>
                    <varlistentry>
                        <term>Providing Game Accessibility</term>
                        <listitem>
                            <para>
                                This is achieved by adding features to the gameplay such as navigation aids and audio cues for events.  Techniques used include the addition of entities, use of impulses, addition of sound functions (some directed at specific clients) and bots.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Supporting Development</term>
                        <listitem>
                            <para>
                                By acting as a layer on top of the Quake gamecode, the AGRIP code allows developers to hook into it, use its accessibility functions and not have to worry about changes in the underlying gamecode.  Developers' lives are made easier when they use the modular ZQuake/AGRIP gamecode system as they can keep the footprint of their mods as small as possible.  Ways to do this are detailed throughout this manual, but include the ability to re-use all existing standard and AGRIP code and the provision of hooks into the AGRIP code at convenient points.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>
                    Many functions created in the development of AudioQuake are written to be as generic as possible.  They form what could be thought of as an <quote>accessibility library</quote> on top of the standard QuakeC.
                </para>
                <note>
                    <para>
                        This modular design approach was tested... all bot navigation code was modified to use the AGRIP accessibility aid functions.  This meant that the bots' perception of the world was essentially that of a blind player.  The bots performed well and began to navigate in a similar style to that of most blind gamers.
                    </para>
                </note>
            </section>
            <section>
                <title>Layout and Design</title>
                <para>
                    Our recommended method of setting up your mod, in terms of directory structure and code re-use, can be found above.  This section explains how the AGRIP code is laid out internally (i.e. inside the <filename>agrip/</filename> directory).
                </para>
                <tip>
                    <para>
                        The source code is heavily commented; take advantage of this to learn how to make best use of the library code that has been written for your mods.
                    </para>
                </tip>
                <variablelist>
                    <varlistentry>
                        <term>agrip_defs.qc</term>
                        <listitem>
                            <para>
                                Stores definitions (global variables, entity fields) for the AGRIP mod.  This file should be read by mod developers to learn about the various hooks in our code that are available to them.  An example hook is AGRIP_MODHOOK_PRECACHE, which allows you to define a function that is called to precache extra data your mod needs.
                            </para>
                            <note>
                                <para>
                                    If you need a hook into a function and we don't provide one currently, you should ask us to create one.  The reason is that in future, if the QC code for ZQuake changes, your mod may well not work.  If you hook into ours, though, we can shield you from such effects of change to the underlying gamecode.  Proposals for new hooks should be sent to the mailing list.
                                </para>
                            </note>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>d5k.qc</term>
                        <listitem>
                            <para>
                                The Detector 5000.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>epi.qc</term>
                        <listitem>
                            <para>
                                The <quote>Auxiliary/Extended Player Information</quote> object.  This is needed because the player doesn't have enough entity fields spare to store all of the information we need to store (such as is used for collision detection).  Each player is given a private one of these when they spawn and the information it records is used by lots of other AGRIP code.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>esr.qc</term>
                        <listitem>
                            <para>
                                The EtherScan RADAR.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>extnav.qc</term>
                        <listitem>
                            <para>
                                Navigational aids that do not rely on the presence of the <quote>nav</quote> object.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>hooks.qc</term>
                        <listitem>
                            <para>
                                Hooks from AGRIP into the main QuakeC gamecode.  DO NOT confuse this with the way we provide hooks into our code for mod developers; this file simply contains AGRIP code that we've put here to lower the footprint on the QuakeC gamecode as a whole.
                            </para>
                            <para>
                                The procedure for hooking into our code is described FIXME elsewhere.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>marker.qc</term>
                        <listitem>
                            <para>
                                The waypoint marker object.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>nav.qc</term>
                        <listitem>
                            <para>
                                This is a huge QC file that contains the core navigation helper object.  The player uses this to get feedback on where they are, what hazards are present and so on.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>progs.src</term>
                        <listitem>
                            <para>
                                This is the <quote>makefile</quote> for the QuakeWorld gamecode.  It lists all the <filename>.qc</filename> files that need to be compiled for the multiplayer game modes to work.  The first line gives the output filename (a <filename>.dat</filename> file, that contains the compiled QuakeC gamecode).
                            </para>
                            <para>
                                You'll notice that some external files are included (from other QC source directories described above).  They are from the original QuakeWorld gamecode; the AGRIP code augments them and hooks into them in certain places.  Your mod code should aim to avoid hooking directly into these files; rather it should hook into the AGRIP code where possible (please tell us if that isn't possible)
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>se.qc</term>
                        <listitem>
                            <para>
                                Sound entity object, created to provide loopable, movable and removable sounds.  Used extensively by other AGRIP code.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>spprogs.src</term>
                        <listitem>
                            <para>
                                This is the same type of file as <filename>progs.src</filename>, but is aimed at the single-player gamecode.  Therefore, the monster and AI code is included too.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>tutor.qc</term>
                        <listitem>
                            <para>
                                The bot we use, written by Darryl <quote>Coffee</quote> Atchison.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>tutor_support.qc</term>
                        <listitem>
                            <para>
                                A file that contains the functions that the Tutor Bot needs to function when compiled for multiplayer gamecode (it requires some AI and other functions from the singleplayer code).
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section id='gcode-agrip-doxygen'>
                <title>Comprehensive Documentation on the AGRIP Gamecode Library</title>
                <para>
                    Each function contains a header comment.  The information provided by the comment is designed to help you use the function in your own modifications.  In fact, all of the code has been prepared in such a way that a special tool can process it and turn it into a website that allows you to learn about any individual function.  The idea is that you can look up functions by name, or the type of work they do, and see where they fit into the rest of the code (and how they work).
                </para>
                <para>
                    If you'd like to visit the <quote>Doxygen</quote> documentation on the AGRIP QuakeC code, go to <ulink url='http://docs.agrip.org.uk/'>the AGRIP documentation site</ulink>.
                </para>
            </section>
        </chapter>
    </part>

    <part id='qmod'>
        <title>QMODs</title>
        <chapter id='qmod-intro'>
            <title>An Introduction to QMODs</title>
            <section>
                <title>What?</title>
                <para>  
                    This is all about a format for packaging your modifications that will make them easy to install by end-users.  The QMOD system is basically a rip-off of a similar idea used by the game Unreal &ndash; users are given a single file that contains the modification and some metadata; when they open this file, the game interprets the metadata and presents a set-up routine specific to that mod but using the game's standard user interface.
                </para>
            </section>
            <section id='qmod-why'>
                <title>Why?</title>
                <para>
                    As far as the user is concerned, installing mods for the game will be easy, with a guaranteed user interface and level of accessibility.  They also get to choose which mod to play, from a list of installed ones, via the launcher.  Finally, they can also uninstall mods easily, again via the launcher.
                </para>
                <para>
                    For the developer, you get the benefit of giving your users the above benefits with very little work &ndash; simply package your mod up in the way described here, adding the required metadata!  In addition, you can ask the launcher to keep your mod's config files up-to-date with any changes put into the user's standard game config files (at no development cost to yourself).
                </para>
                <section>
                    <title>Why Not?</title>
                    <para>
                        We've designed this system to make it ideal for people to mod AudioQuake; it does all of the chores of setting up mods for the user and adds little extra work for the developer.  There is, however, one situation in which it is not the best way to proceed: total conversions.  Total conversions modify the game engine as well as the content and/or gamecode, so they are technically different games.
                    </para>
                    <para>
                        We felt that those of you making total conversions would want to make your own separate game with its own installer.  Naturally, the QMOD system can be used to create mods for any total conversion of AudioQuake, just as it can with AudioQuake itself, so even if you're a total conversion developer, you can still take advantage of it!
                    </para>
                </section>
            </section>
        </chapter>
        <chapter id='qmod-how-dev'>
            <title>How? (for Developers)</title>
            <para>
                It's easy!  You need to package up all the files required by your mod, in a particular way, then create an INI file to describe your mod to the installer.  Here is how...
            </para>
            <procedure>
                <step>
                    <para>
                        Ensure that you have packaged up all the files your mod needs (sound, progs, models, maps, graphics) into the correct directory structure below your AudioQuake parent directory.
                    </para>
                    <para>
                        Furthermore, ensure that anything that <emphasis>isn't</emphasis> required is not in this directory!  This includes source code (that should be distributed separately).
                    </para>
                </step>
                <step>
                    <para>
                        Ensure your mod's config instructions are included in a single file, mod.cfg.  You can add mod-specific keys in this file.  This file overrides settings in the user's <filename>config.cfg</filename> and <filename>autoexec.cfg</filename> files.
                    </para>
                    <para>
                        Later on, you must specify if you want the game launcher to keep your mod updated with changes the user makes to their <filename>config.cfg</filename> and <filename>autoexec.cfg</filename> files.
                    </para>
                    <para>
                        Here is part of the <filename>mod.cfg</filename> file from the <quote>JediQuake</quote> modification:
                    </para>
                    <screen>
// Commands specific to this MOD...

bind "h" "+Blaster"
// default key to use blaster is "h"
                    </screen>
                </step>
                <step>
                    <para>
                        Take your mod directory and put it in a new directory that has the name of your mod.  If you are naming your mod directories with an appended version number (<filename>jediquake37</filename>, for example), the name you give to the parent directory should <emphasis>not</emphasis> include this (<filename>jediquke</filename>, for example).
                    </para>
                </step>
                <step>
                    <para>
                        Construct an INI file for your mod in this parent directory, next to your mod's installation directory.  The INI file should be called <filename>qmod.ini</filename>.  For details of all available options, consult <xref linkend='ref-qmodini'>the appendix on QMOD INI file options</xref>.  Here is an example, again taken from the <quote>JediQuake</quote> modification:
                    </para>
                    <screen>
[general]
name=JediQuake
shortdesc=Audio Quake with a Star Wars flair!
version=3.7
gamedir=jediquake37
watch_config=yes
watch_autoexec=yes

[longdesc]
00=This mod adds various Star Wars style weapons to the game along with
01=force powers, new weapons and modifications of existing weapons...
02=The bots may also surprise you as well...
03=See the jediquake folder for documentation.
                    </screen>
                </step>
                <step>
                    <para>
                        ZIP up the parent directory so that you have created a ZIP file with two items in it &ndash; the MOD's installation directory and the <filename>qmod.ini</filename> file.
                    </para>
                    <para>
                        Finally, rename the ZIP file to the name of the parent directory (i.e. the MOD's name) with a <filename>.qmod</filename> extension to replace the <filename>.zip</filename> one it pops out of your ZIP creator with.
                    </para>
                </step>
            </procedure>
        </chapter>
        <chapter id='qmod-how-usr'>
            <title>How? (for Users)</title>
            <para>
                Very easy!  On Windows, a simple double-click should open the game launcher in QMOD installation mode.  On Linux, entering the following command, in the user's ZQuake directory, will do the job:
            </para>
            <screen>
<prompt>$</prompt> <command>./start.pl</command> <replaceable>filename.qmod</replaceable>
            </screen>
        </chapter>
    </part>
    
    <part id='engine'>
        <title>Engine Workings</title>
        <chapter id='engine-rr'>
            <title>Required Reading</title>
            <para>
                FIXME - Basic Knowledge from Wiki (links)
                IN REFERENCE APPENDIX
            </para>
        </chapter>
        <chapter id='engine-overview'>
            <title>Overview of a Quake Engine</title>
            <para>
                FIXME - 
            sections/layers
            forks/lineage
            extensions
                quakesrc
            </para>
        </chapter>
        <chapter id='engine-changes'>
            <title>Changes for Accessibility</title>
            <para>
                FIXME
            </para>
        </chapter>
        <chapter id='engine-modscope'>
            <title>Scope for Change</title>
            <para>
                FIXME
            types of things you'd change in an engine
            qf, nexuiz, tenebrae
            </para>
        </chapter>
    </part>

    <part id='doc'>
        <title>Documentation: Build and Development</title>
        <para>
            FIXME - explain how, with links to AGDev
        </para>
    </part>

    <part id='sns'>
        <title>Stats and Servers System</title>
        <chapter id='sns-intro'>
            <title>Backstory and Goals</title>
            <para>
                FIXME
            </para>
        </chapter>
        <chapter id='sns-sns'>
            <title>Stats and Severs</title>
            <section>
                <title>Stats Gathering</title>
                <para>
                    FIXME
                </para>
            </section>
            <section>
                <title>Processing (Qlog)</title>
                <para>
                    FIXME
                </para>

            </section>
            <section>
                <title>Active Servers List (QStat)</title>
                <para>
                    FIXME
                </para>
            </section>
            <section>
                <title>Site Scripts</title>
                <para>
                    FIXME
                </para>
            </section>
        </chapter>
        <chapter id='sns-mauth'>
            <title>MAUTH &ndash; Master AUTHentication protocol</title>
            <para>
                FIXME
            </para>
        </chapter>
    </part>

    <appendix id='ref'>
        <title>Reference Material</title>
        <para>
            This section contains links to web sites I found useful whilst developing the AGRIP accessibility routines, as well as some new ones that have sprung up since.
        </para>
        <para>
            Please note that for more general links, you might want to consult the <ulink url='http://www.agrip.org.uk/LinksPage'>links page</ulink> on the AGRIP Wiki.
        </para>
        <section id='ref-vcs'>
            <title>Version Control Systems</title>
            <variablelist>
                <varlistentry>
                    <term><ulink url='http://svnbook.red-bean.com/'>The Subversion Book</ulink></term>
                    <listitem>
                        <para>
                            An excellent reference on this VCS, which includes a great deal of useful information on VCSes in general.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://subversion.tigris.org/'>subversion.tigris.org</ulink></term>
                    <listitem>
                        <para>
                            The official home of Subversion.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id='ref-qc'>
            <title>QuakeC</title>
            <variablelist>
                <varlistentry>
                    <term><ulink url='http://www.agrip.org.uk/GameCode'>GameCode and QuakeC pages on the AGRIP Wiki</ulink></term>
                    <listitem>
                        <para>
                            These provide a very basic overview of how the Gamecode and QuakeC fit into the overall development system.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://tylee.f2s.com/agrip/ref/QCMAN10.TXT'>QuakeC Manual 1.0 by Ferrara Francesco (frank@aerre.it)</ulink></term>
                    <listitem>
                        <para>
                            A comprehensive guide to QuakeC from the basics to more advanced topics.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://tylee.f2s.com/agrip/ref/QuakeC%20Reference%20Manual.doc'>QuakeC Reference Manual by David <quote>DarkGrue</quote> Hesprich (darkgrue@iname.com)</ulink></term>
                    <listitem>
                        <para>
                            Another very good basics-to-advanced tutorial on QuakeC.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://wiki.quakesrc.org/'>The Quake Wiki</ulink></term>
                    <listitem>
                        <para>
                            This site contains a comprehensive list of QuakeC functions, their availability in different engines and standard engine extensions &ndash; and includes detailed information on most of them.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://www.inside3d.com/qctut/'>Inside3D QuakeC Tutorials</ulink></term>
                    <listitem>
                        <para>
                            Some great tutorials can be found here, but beware of the pop-ups :-S.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://www.planetquake.com/minion/tutorial%5Cmain.htm'>AI Cafe Tutorials</ulink></term>
                    <listitem>
                        <para>
                            Home of the TutorBot and some interesting tutorials on QuakeC and Bot AI.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id='ref-qeng'>
            <title>Quake Engines and Standards</title>
            <variablelist>
                <varlistentry>
                    <term><ulink url='http://www.quakesrc.org/'>QuakeSrc.org &ndash; The Quake Standards Group</ulink></term>
                    <listitem>
                        <para>
                            <emphasis>The</emphasis> site for engine developers and modders &mdash; includes news and a list of extensions, with a community-based protocol for having new ones added.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://www.besmella-quake.com/scripts/zquake/index.cgi'>ZQuake Development Board</ulink></term>
                    <listitem>
                        <para>
                            A place to report bugs/fixes, ask questions and get help with adding new features to this amazing QuakeWorld engine.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id='ref-docbookx'>
            <title>DocBook XML</title>
            <variablelist>
                <varlistentry>
                    <term><ulink url='http://www.docbook.org/'>DocBook.org</ulink></term>
                    <listitem>
                        <para>
                            Provides some general information on the standard.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><ulink url='http://www.docbook.org/tdg/en/html/docbook.html'>DocBook &ndash; The Definitive Guide</ulink></term>
                    <listitem>
                        <para>
                            The complete reference manual.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id='ref-perl'>
            <title>Perl</title>
            <variablelist>
                <varlistentry>
                    <term>Perl Manual Pages</term>
                    <listitem>
                        <para>
                            If you're on a UNIX-like system, <quote>man perl</quote> should give you all of the information you need.  If not, try browsing the <ulink url='http://www.perl.org/docs.html'>resources at perl.org</ulink>.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id='ref-ch'>
            <title>Community and Historical Links</title>
            <variablelist>
                <varlistentry>
                    <term><ulink url='ftp://ftp.idsoftware.com/idstuff/'>id Software's <quote>idstuff</quote> FTP directory</ulink></term>
                    <listitem>
                        <para>
                            Provides source and binaries (including patches) for lots of id's games and editing and development tools.  Not all Open Source but worth a look!  Note that this is just for the technology; extra maps and most official bonus packs are distributed via different channels.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </appendix>

    <appendix id='ref-qmodini'>
        <title>QMOD INI File Settings</title>
        <para>
            The following sections detail the various options available to MOD authors in QMOD INI files.  The are split into the two (current) sections of the INI file &ndash; <quote>general</quote> and <quote>longdesc</quote>.
        </para>
        <section>
            <title>General</title>
            <para>
                This section contains details that the installer and launcher will both use.  It allows you to provide the user with basic information about the MOD and determines how it will react to the user's (potentially customised) config files.
            </para>
            <table>
                <title>Configuration Items for the General Section of QMOD INI files</title>
                <tgroup cols='3'>
                    <thead>
                        <row>
                            <entry>Key</entry>
                            <entry>Notes</entry>
                            <entry>Example(s)</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>name</entry>
                            <entry>Name that users are presented with (in the installer and mod list)</entry>
                            <entry>JediQuake</entry>
                        </row>
                        <row>
                            <entry>shortdesc</entry>
                            <entry>Short(!!) description used by installer and mod list in the launcher</entry>
                            <entry>AudioQuake with a Star Wars flair!</entry>
                        </row>
                        <row>
                            <entry>version</entry>
                            <entry>The (user-facing) version number of your mod</entry>
                            <entry>3.7</entry>
                        </row>
                        <row>
                            <entry>gamedir</entry>
                            <entry>Which directory your mod must run from</entry>
                            <entry>jediquake37</entry>
                        </row>
                        <row>
                            <entry>watch_config</entry>
                            <entry>Should your mod be updated with the user's latest <filename>config.cfg</filename> file when it changes?  Note that this does not change your mod's <filename>mod.cfg</filename> file, which has precedence.</entry>
                            <entry>yes (or anything else if you don't want this)</entry>
                        </row>
                        <row>
                            <entry>watch_autoexec</entry>
                            <entry>Should your mod be updated with the user's latest <filename>autoexec.cfg</filename> file when it changes?  Note that this does not change your mod's <filename>mod.cfg</filename> file, which has precedence.</entry>
                            <entry>yes (or anything else if you don't want this)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <section>
                <title>Example</title>
                <para>
                    For your convenience, here's an example <quote>general</quote> section:
                </para>
                <screen>
[general]
name=JediQuake
shortdesc=Audio Quake with a Star Wars flair!
version=3.7
gamedir=jediquake37
watch_config=yes
watch_autoexec=yes
                </screen>
            </section>
        </section>
        <section>
            <title>Longdesc</title>
            <para>
                This section is optional and, if included, is used to give the user more information about the MOD when they select it in the game launcher's menu.
            </para>
            <para>
                Create it by assigning each <quote>chunk</quote> of your MOD's description to a key.  Each chunk must be less than 80 characters long.  Use keys which, when sorted, will result in the correct ordering of chunks (i.e. just number each chunk).
            </para>
            <para>
                The obligatory example:
            </para>
            <screen>
[longdesc]
00=This mod adds various Star Wars style weapons to the game along with
01=force powers, new weapons and modifications of existing weapons...
02=The bots may also surprise you as well...
03=See the jediquake folder for documentation.
            </screen>
        </section>
    </appendix>
</book>
